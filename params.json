{"google":"UA-26466641-1","tagline":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Getting Started\r\n\r\n[![Build Status](https://travis-ci.org/elementaljs/elementaljs.png?branch=master)](https://travis-ci.org/elementaljs/elementaljs)\r\n[![Dependency Status](https://gemnasium.com/elementaljs/elementaljs.png)](https://gemnasium.com/elementaljs/elementaljs)\r\n\r\n## Dependencies\r\n\r\nCurrenty, elemental.js depends on jQuery and UnderscoreJS, we'll try and refactor these out, but in this early stage you'll need those too. Sorry.\r\n\r\n## Rails Gem\r\n\r\nIn order to use in Rails, a Gem is available which integrates with the asset pipeline.\r\n\r\n  gem 'elementaljs-rails'\r\n\r\n## Running\r\n\r\nDrop the elemental.js file into your project and load the container you want to apply this library too. In most cases you'll want to apply to the whole document.\r\n\r\n    (document).ready(function() {\r\n      Elemental.load(document);\r\n    });\r\n\r\nThen in any HTML, you can add a behavior through a data attribute.\r\n\r\n    <div data-behavior=\"Mybehavior\"></div>\r\n\r\nAfter load, ElementalJS will look for any elements with the data-behavior attribute and run the function named.  It will pass the containing element through to the behavior so that the function can apply behaviors directly to that element and it's children.\r\n\r\n    MyBehavior = function(element) {\r\n      alert(element);\r\n    }\r\n\r\nThe behavior names can be namespaced so you can have HTML that looks like:\r\n\r\n    <button data-behavior=\"My.App.ButtonClick\"></button>\r\n\r\nIt is possible to either use fully qualified function names, or you can tell Elemental about a namespace where the function lives.\r\n\r\n    My = {\r\n      App: {\r\n        ButtonClick: function(element){\r\n          element.bind('click', function() {\r\n            alert('button was clicked');\r\n          });\r\n        }\r\n      }\r\n    };\r\n    Elemental.addNamespace(My.App);\r\n\r\n    $(document).ready(function() {\r\n      Elemental.load(document);\r\n    });\r\n\r\nThen in your HTML, you can put the function name without the namespace.\r\n\r\n    <button data-behavior=\"ButtonClick\"></button>\r\n\r\n# Available Behaviors\r\n\r\n## Javascript enabled\r\n\r\nThis behavior adds a class of 'js' to the element it's included on. This is useful for stylesheets to target environments knowing that Javascript is enabled or not. For maximum benefit, include this behavior on the body element.\r\n\r\n- Include the file in src/behaviors/javascript_enabled.js\r\n- Add 'Elemental.JavascriptEnabled' to the body element\r\n\r\n## Reload element\r\n\r\nThis behavior will hit the server on the current URI with a header, x-pjax=true. It will then insert the response into the HTML of the element.\r\n\r\nYour server should only return the element which is being replace, and should use the x-pjax header to tell if it should do that.\r\n\r\n# Why\r\n\r\n## What about unobtrusive javascript?\r\n\r\nThere are four components of unobtrusive javascript\r\n\r\n- Usability\r\n- Graceful degradation\r\n- Accessibility\r\n- Seperation\r\n\r\nWhile three of the four components don't really affect this project, the forth, seperation of concern between the presentation layer and the Javascript, does.\r\n\r\nThe [section on seperation of concerns on Wikipedia covers this concern well.](http://en.wikipedia.org/wiki/Unobtrusive_JavaScript#Separation_of_behavior_from_markup) This project is quite clearly encouraging the use of putting behavior into the presentation. What's different this time around?\r\n\r\nUsing this project or this pattern we are not expressively stating what events to fire upon (e.g. onclick or onchange), we are just defining a behavior that wraps this element. One of the concerns addressed in the seperation of concerns section in the Wikipedia article is ease of development but by defining small behaviors they canbe easily seperated into their own files which are easy to test. This reduces the concern about maintainablilty.\r\n\r\nHaving the indication about what behaviors are applied to an element can also be useful in discoverability. With the seperation between presentation and behavior it can be difficult finding what code is being executed over a part of the DOM. With the behavior, you can narrow that down to a single file and get to where you need to be all that much quicker.\r\n\r\n## What about unobtrusive HTML?\r\n\r\nMany Javascript applications will be loaded when the DOM has finished loading and will generally search the entire DOM for elements to attach events to. Using Elemental the element gets passed into the function that contains the behavior. This enables that function to search the DOM locally and reduce the chance of any changes to the DOM affecting the applications javascript.\r\n\r\n# Development\r\n\r\n## Dependencies\r\n\r\nYou'll need bundler to install the Rubygem dependencies for the build process.\r\n\r\n    gem install bundler\r\n    bundle install --binstubs\r\n\r\nWhen you're developing, run the following command to use binaries in the bin folder that bundler has installed there.\r\n\r\n    export PATH=`pwd`/bin:$PATH\r\n\r\n## Tests\r\n\r\n### Jasmine\r\n\r\nTo get Jasmine up and running, run the following rake task\r\n\r\n    rake jasmine\r\n\r\nThen point your browser to http://localhost:8888\r\n\r\n### Continuous Integration\r\n\r\nA rake task called 'ci' will run JSLint and Jasmine tests.\r\n\r\n    rake ci\r\n\r\n# Contributing\r\n\r\nFork this project and create a new branch. Make the code changes including tests and then send a pull request.\r\n\r\n# Next Steps\r\n\r\nWe will look to add common behaviors and refactor out the dependencies on jQuery and Underscore. We think it'd be better to create a separate project for common behaviors using different libraries, i.e. elemental-jquery.\r\n","name":"Elementaljs"}