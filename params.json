{"tagline":"","body":"# Getting Started\r\n\r\n## Dependencies\r\n\r\nCurrenty, elemental.js depends on jQuery and UnderscoreJS, we'll try and refactor these out, but in this early stage you'll need those too. Sorry.\r\n\r\n## Rails Gem\r\n\r\nIn order to use in Rails, a Gem is available which integrates with the asset pipeline.\r\n\r\n  gem 'elementaljs-rails'\r\n\r\n## Running\r\n\r\nDrop the elemental.js file into your project and load the container you want to apply this library too. In most cases you'll want to apply to the whole document.\r\n\r\n\t$(document).ready(function() {\r\n\t\tElemental.load(document);\r\n\t});\r\n\t\r\nThen in any HTML, you can add a behavior through a data attribute.\r\n\r\n\t<div data-behavior=\"Mybehavior\"></div>\r\n\t\r\nAfter load, ElementalJS will look for any elements with the data-behavior attribute and run the function named.  It will pass the containing element through to the behavior so that the function can apply behaviors directly to that element and it's children.\r\n\r\n\tMyBehavior = function(element) {\r\n\t\talert(element);\r\n\t}\r\n\t\r\nThe behavior names can be namespaced so you can have HTML that looks like:\r\n\r\n\t<button data-behavior=\"My.App.ButtonClick\"></button>\r\n\r\nIt is possible to either use fully qualified function names, or you can tell Elemental about a namespace where the function lives.\r\n\r\n\tMy = { \r\n\t\tApp: {\r\n\t\t\tButtonClick: function(element){\r\n\t\t\t\telement.bind('click', function() {\r\n\t\t\t\t\talert('button was clicked');\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} \r\n\t};\r\n\tElemental.addNamespace(My.App);\r\n\t\r\n\t$(document).ready(function() {\r\n\t\tElemental.load(document);\r\n\t});\r\n\t\r\nThen in your HTML, you can put the function name without the namespace.\r\n\r\n\t<button data-behavior=\"ButtonClick\"></button>\r\n\t\r\n# Available Behaviors\r\n\r\n## Javascript enabled\r\n\r\nThis behavior adds a class of 'js' to the element it's included on. This is useful for stylesheets to target environments knowing that Javascript is enabled or not. For maximum benefit, include this behavior on the body element.\r\n\r\n- Include the file in src/behaviors/javascript_enabled.js\r\n- Add 'Elemental.JavascriptEnabled' to the body element\r\n\r\n## Reload element\r\n\r\nThis behavior will hit the server on the current URI with a header, x-pjax=true. It will then insert the response into the HTML of the element. \r\n\r\nYour server should only return the element which is being replace, and should use the x-pjax header to tell if it should do that.\r\n\r\n# Development\r\n\r\n## Dependencies\r\n\r\nYou'll need bundler to install the Rubygem dependencies for the build process.\r\n\r\n\tgem install bundler\r\n\tbundle install --binstubs\r\n\t\r\nWhen you're developing, run the following command to use binaries in the bin folder that bundler has installed there. \r\n\r\n\texport PATH=`pwd`/bin:$PATH\r\n\r\n## Tests\r\n\r\n### Jasmine\r\n\r\nTo get Jasmine up and running, run the following rake task\r\n\r\n\trake jasmine\r\n\t\r\nThen point your browser to http://localhost:8888\t\r\n\r\n### Continuous Integration\r\n\r\nA rake task called 'ci' will run JSLint and Jasmine tests.\r\n\r\n\trake ci\r\n\r\n# Contributing\r\n\r\nFork this project and create a new branch. Make the code changes including tests and then send a pull request.\r\n\r\n# Next Steps\r\n\r\nWe will look to add common behaviors and refactor out the dependencies on jQuery and Underscore. We think it'd be better to create a separate project for common behaviors using different libraries, i.e. elemental-jquery. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Elementaljs"}